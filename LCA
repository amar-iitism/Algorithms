// 2 Methods. First one is faster
#include<stdio.h>

int parent[1001],visited[1001];

int lca(int x, int y, int n){

	int i;
	for(i=1;i<=n;i++) visited[i] = 0;

	visited[x] = 1;

	while(parent[x]!=x){
		visited[x] = 1;
		x = parent[x];
	}

	visited[x] = 1;

	while(visited[y]!=1) y = parent[y];

	return y;
}

int main(void){
	unsigned t,case_no;
	int n,m,q,x,y,i,j,k;
	scanf("%u",&t);
	for(case_no=1;case_no<=t;case_no++){
		printf("Case %u:\n",case_no);
		scanf("%d",&n);
		for(k=1;k<=n;k++) parent[k] = k;
		for(i=1;i<=n;i++){
			scanf("%d",&m);
			while(m--){
				scanf("%d",&k);
				parent[k] = i;
			}
		}
		scanf("%d",&q);
		while(q--){
			scanf("%d %d",&x,&y);
			printf("%d\n",lca(x,y,n));
		}
	}
	return 0;
}





/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#include<bits/stdc++.h>
using namespace std;
int n;
int level[10007],vis[10007],p[10007];
vector<int> v[10007];
void bfs()
{
  queue<int> q;
  q.push(1);
  level[1]=0;
  memset(vis,0,sizeof(vis));
  memset(level,0,sizeof(level));
  vis[1]=1;
  while(!q.empty())
  {
   int x=q.front();
   q.pop();
   for(int i=0;i<v[x].size();i++)
   {
    int y=v[x][i];
    if(vis[y]==0)
    {
     vis[y]=1;
     level[y]=level[x]+1;
     q.push(y);
    }
   }
  }

}

int main()
{
  int t;
  cin>>t;
  int k=1;
  while(t--)
  {
   cin>>n;
   memset(p,-1,sizeof(p));
   for(int i=0;i<10007;i++)
    v[i].clear();
   for(int i=1;i<=n;i++)
   {
    int m;
    cin>>m;
    for(int j=1;j<=m;j++)
    {
     int z;
     cin>>z;
     p[z]=i;
     v[i].push_back(z);

    }
   }
   bfs();

   int q;
   cin>>q;
   cout<<"Case "<<k<<":"<<endl;
   while(q--)
   {
    int a,b;
    cin>>a>>b;
    int y1=level[a];
    int y2=level[b];

    if(y1<y2)
    {
     int d=y2-y1;

     for(int i=0;i<d;i++)
     {
      b=p[b];
     }
    }
    else if(y2<y1)
    {
     int d=y1-y2;
     for(int i=0;i<d;i++)
     {
      a=p[a];
     }
    }
     while(a!=b)
     {
      a=p[a];
      b=p[b];
     }
    cout<<a<<endl;
   }
   k++;
  }
}
