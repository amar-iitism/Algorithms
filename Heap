void heapify (int a[], int n, int i) {
	int largest = i;
	int l = 2*i;
    int r= 2*i+1;

    if(l<=n && a[l]>a[largest]) {
     largest = l;
    }
    if(r<=n && a[r]> a[largest]) {
     largest =r;
    }
    if(largest != i) {
     swap(a,i,largest);
     heapify(a,n,largest);
    }
}

void buildHeap (int a[n],int n) {
	for(int i=(n/2);i>0;i--) {
	 heapify(a,n,i);
	}
}

void deleteRoot (int a[],int n) {
	int a[0]= a[n];
	n--;
	heapify(a,n,0);
}

void insertHeapify (int a[],int n,int i) {
	int parent = (i/2);
	if(a[parent]>0) {
	 if(a[i] > a[parent]) {
	  swap(a[i],a[parent]);
	  insertHeapify(a,n,parent);
	 }
	}
}

void insertNode (int a[],int n, int key) {
	n++;
	a[n]=key;
	heapify(a,n,n);
}

